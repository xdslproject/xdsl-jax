[project]
name = "xdsl-jax"
version = "0.1.0"
description = "Extend JAX with xDSL."
readme = "README.md"
requires-python = ">=3.10"
dependencies = ["jax>=0.6.2", "xdsl>=0.53.0"]
classifiers = ["Programming Language :: Python :: 3 :: Only", "Typing :: Typed"]
license = { text = "Apache License v2.0 with LLVM Exceptions" }
authors = [{ name = "Sasha Lopoukhine", email = "sasha@lopoukhine.com" }]

[project.entry-points.'xdsl.universe']
xdsl_jax = 'xdsl_jax.universe:XDSL_JAX_UNIVERSE'

[tool.uv.sources]
xdsl = { git = "https://github.com/xdslproject/xdsl.git", rev = "44e68054841b9937b6da9cf77f5369f18f336bae" }

[project.urls]
Homepage = "https://xdsl.dev/xdsl-jax"
"Source Code" = "https://github.com/xdslproject/xdsl-jax"
"Issue Tracker" = "https://github.com/xdslproject/xdsl-jax/issues"


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "filecheck==1.0.3",
    "lit<19.0.0",
    "pre-commit-hooks>=5.0.0",
    "pre-commit>=4.0.1",
    "pytest>=8.3.4",
    "pytest-cov",
    "pyright==1.1.406",
]
docs = ["mkdocs-material>=9.5.48", "mkdocstrings[python]>=0.26.1"]


[tool.pyright]
venvPath = "."
venv = ".venv"
enableExperimentalFeatures = true
reportAssertAlwaysTrue = true
reportUnnecessaryCast = true
reportUnnecessaryIsInstance = true
reportUnnecessaryTypeIgnoreComment = true
typeCheckingMode = "strict"
extraPaths = ["tests"]
"include" = ["docs", "src", "tests"]

[tool.ruff]
# Support Python 3.10+.
target-version = "py310"
src = ["src/", "tests/"]

[tool.ruff.lint]
select = ["E", "F", "W", "I", "UP", "PT", "TID251", "INP", "PYI"]
ignore = [
    "E741",   # https://beta.ruff.rs/docs/rules/ambiguous-variable-name/
    "PT006",  # https://beta.ruff.rs/docs/rules/pytest-parametrize-names-wrong-type/
    "PT011",  # https://beta.ruff.rs/docs/rules/pytest-raises-too-broad/
    "PT012",  # https://beta.ruff.rs/docs/rules/pytest-raises-with-multiple-statements/
    "PYI041", # https://docs.astral.sh/ruff/rules/redundant-numeric-union
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.format]
docstring-code-format = true

[tool.bandit]
exclude_dirs = [".venv/"]
skips = ["B101"]

[tool.pytest.ini_options]
addopts = ["--durations=20", "--maxfail=5", "--import-mode=importlib"]

[tool.coverage.run]
relative_files = true
branch = true
source = ["src/"]
concurrency = ["multiprocessing"]
parallel = true

[tool.coverage.report]
exclude_lines = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    # Don't complain if tests don't hit defensive assertion code:
    "raise NotImplementedError",
    "raise ValueError",
    "raise TypeError",
    "raise RuntimeError",
    "assert_never",
    'if TYPE_CHECKING:',
    'pragma: no cover',
]
format = "markdown"
